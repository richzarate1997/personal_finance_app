import tkinter as tk
from tkinter import ttk
from collections import defaultdict
from datetime import datetime, timedelta

class FinanceApp:
    def __init__(self, tracker):
        self.tracker = tracker
        self.root = tk.Tk()
        self.root.title("Finance Tracker")

        # Column Labels for Fixed and Variable Incomes
        self.setup_column_labels(row_start=0, is_fixed=True)
        self.setup_column_labels(row_start=4, is_fixed=False)

        # Column Labels for Fixed and Variable Expenses
        self.setup_column_labels(row_start=8, is_fixed=True)
        self.setup_column_labels(row_start=12, is_fixed=False)
        
        # Add Fixed Income
        ttk.Label(self.root, text="Add Fixed Income").grid(row=0, column=0, padx=10, pady=10)
        self.setup_income_ui(row_start=1, is_fixed=True)
        
        # Add Variable Income
        ttk.Label(self.root, text="Add Variable Income").grid(row=4, column=0, padx=10, pady=10)
        self.setup_income_ui(row_start=5, is_fixed=False)

        # Column Labels for Fixed and Variable Expenses
        self.setup_column_labels(row_start=8, is_fixed=True)
        self.setup_column_labels(row_start=12, is_fixed=False)
        
        # Add Fixed Expense
        ttk.Label(self.root, text="Add Fixed Expense").grid(row=8, column=0, padx=10, pady=10)
        self.setup_expense_ui(row_start=9, is_fixed=True)
        
        # Add Variable Expense
        ttk.Label(self.root, text="Add Variable Expense").grid(row=12, column=0, padx=10, pady=10)
        self.setup_expense_ui(row_start=13, is_fixed=False)
        
        # Future Projections
        ttk.Label(self.root, text="Projected Balance").grid(row=16, column=0, padx=10, pady=10)
        
        self.projection_date = ttk.Entry(self.root)
        self.projection_date.grid(row=17, column=0)
        
        ttk.Button(self.root, text="Get Projection", command=self.get_projection).grid(row=17, column=1)
        
        self.projection_result = ttk.Label(self.root, text="Projected balance will appear here.")
        self.projection_result.grid(row=17, column=2, columnspan=3)
        
        self.root.mainloop()

    def setup_income_ui(self, row_start, is_fixed):
        source_entry = ttk.Entry(self.root)
        source_entry.grid(row=row_start, column=0)
        
        amount_entry = ttk.Entry(self.root)
        amount_entry.grid(row=row_start, column=1)
        
        date_entry = ttk.Entry(self.root)
        date_entry.grid(row=row_start, column=2)
        
        if is_fixed:
            frequency_combo = ttk.Combobox(self.root, values=["daily", "weekly", "bi-weekly", "monthly"])
            frequency_combo.grid(row=row_start, column=3)
            btn = ttk.Button(self.root, text="Add Fixed Income", command=lambda: self.add_fixed_income(source_entry.get(), float(amount_entry.get()), date_entry.get(), frequency_combo.get()))
            btn.grid(row=row_start, column=4)
        else:
            btn = ttk.Button(self.root, text="Add Variable Income", command=lambda: self.add_variable_income(date_entry.get(), float(amount_entry.get())))
            btn.grid(row=row_start, column=3)

    def setup_expense_ui(self, row_start, is_fixed):
        source_entry = ttk.Entry(self.root)
        source_entry.grid(row=row_start, column=0)
        
        amount_entry = ttk.Entry(self.root)
        amount_entry.grid(row=row_start, column=1)
        
        date_entry = ttk.Entry(self.root)
        date_entry.grid(row=row_start, column=2)
        
        if is_fixed:
            frequency_combo = ttk.Combobox(self.root, values=["daily", "weekly", "bi-weekly", "monthly"])
            frequency_combo.grid(row=row_start, column=3)
            btn = ttk.Button(self.root, text="Add Fixed Expense", command=lambda: self.add_fixed_expense(source_entry.get(), float(amount_entry.get()), date_entry.get(), frequency_combo.get()))
            btn.grid(row=row_start, column=4)
        else:
            btn = ttk.Button(self.root, text="Add Variable Expense", command=lambda: self.add_variable_expense(date_entry.get(), float(amount_entry.get())))
            btn.grid(row=row_start, column=3)

    def setup_column_labels(self, row_start, is_fixed):
        ttk.Label(self.root, text="Source/Description").grid(row=row_start, column=0, padx=5, pady=5)
        ttk.Label(self.root, text="Amount").grid(row=row_start, column=1, padx=5, pady=5)
        ttk.Label(self.root, text="Date (YYYY-MM-DD)").grid(row=row_start, column=2, padx=5, pady=5)
        
        if is_fixed:
            ttk.Label(self.root, text="Frequency").grid(row=row_start, column=3, padx=5, pady=5)

    def add_fixed_income(self, source, amount, date_str, frequency):
        date = datetime.strptime(date_str, '%Y-%m-%d')
        self.tracker.add_fixed_income(source, amount, date, frequency)

    def add_variable_income(self, date_str, amount):
        date = datetime.strptime(date_str, '%Y-%m-%d')
        self.tracker.add_variable_income(date, amount)

    def add_fixed_expense(self, source, amount, date_str, frequency):
        date = datetime.strptime(date_str, '%Y-%m-%d')
        self.tracker.add_fixed_expense(source, amount, date, frequency)

    def add_variable_expense(self, date_str, amount):
        date = datetime.strptime(date_str, '%Y-%m-%d')
        self.tracker.add_variable_expense(date, amount)

    def get_projection(self):
        date = datetime.strptime(self.projection_date.get(), '%Y-%m-%d')
        projected_balance = self.tracker.project_balance(datetime.now(), [date])
        self.projection_result.config(text=f"Projected balance on {date.date()}: ${projected_balance[date.date()]}")

# Remember to include your FinanceTracker class above this.


class FinanceTracker:
    def __init__(self, starting_balance):
        self.balance = starting_balance
        self.fixed_income = defaultdict(lambda: {"amount": 0, "date": None, "frequency": None})
        self.variable_income = {}
        self.fixed_expenses = defaultdict(lambda: {"amount": 0, "date": None, "frequency": None})
        self.variable_expenses = {}

    def to_date(self, dt):
        if isinstance(dt, datetime):
            return dt.date()
        return dt


    def add_fixed_income(self, source, amount, date, frequency):
        self.fixed_income[source]['amount'] = amount
        self.fixed_income[source]['date'] = self.to_date(date)# Convert datetime to date
        self.fixed_income[source]['frequency'] = frequency

    def add_variable_income(self, date, amount):
        self.variable_income[date] = amount

    def add_fixed_expense(self, source, amount, date, frequency):
        self.fixed_expenses[source]['amount'] = amount
        self.fixed_expenses[source]['date'] = self.to_date(date)  # Convert datetime to date
        self.fixed_expenses[source]['frequency'] = frequency

    def add_variable_expense(self, date, amount):
        self.variable_expenses[date] = amount

    def is_applicable(self, today, target_date, date, frequency):
        today = self.to_date(today)
        target_date = self.to_date(target_date)
        date = self.to_date(date)

        if today > target_date:
            return False

        if frequency == "daily":
            return True

        if frequency == "weekly":
            while date <= target_date:
                if date >= today:
                    return True
                date += timedelta(days=7)

        if frequency == "bi-weekly":
            while date <= target_date:
                if date >= today:
                    return True
                date += timedelta(days=14)

        if frequency == "monthly":
            while date <= target_date:
                if date >= today:
                    return True
                # Add a month to date
                if date.month == 12:  # if December
                    date = date.replace(year=date.year+1, month=1)
                else:
                    date = date.replace(month=date.month+1)

        return False




    def calculate_balance(self, today, target_date):
        current_balance = self.balance
        cur_date = self.to_date(today)
        
        while cur_date <= self.to_date(target_date):
            # Daily incomes and expenses
            incomes = [self.fixed_income[source]['amount'] for source in self.fixed_income 
                    if self.is_applicable(cur_date, cur_date, self.fixed_income[source]['date'], self.fixed_income[source]['frequency'])]
            
            total_income = sum(incomes)
            total_income += self.variable_income.get(cur_date, 0)

            expenses = [self.fixed_expenses[source]['amount'] for source in self.fixed_expenses 
                    if self.is_applicable(cur_date, cur_date, self.fixed_expenses[source]['date'], self.fixed_expenses[source]['frequency'])]
            
            total_expenses = sum(expenses)
            total_expenses += self.variable_expenses.get(cur_date, 0)

            current_balance += total_income - total_expenses
            cur_date += timedelta(days=1)

        return current_balance



    def project_balance(self, today, dates):
        projections = {}
        for date in dates:
            projections[date.date()] = self.calculate_balance(today, date.date())
        return projections


# Fixed Income and Expenses
tracker = FinanceTracker(starting_balance=877)
tracker.add_fixed_income("W2 Job", 1117, datetime(2023, 8, 11), "bi-weekly")
tracker.add_fixed_expense("Car Payment", 468, datetime(2023, 8, 22), "monthly")
tracker.add_fixed_expense("Car Insurance", 176, datetime(2023, 8, 12), "monthly")
tracker.add_fixed_expense("Google", 3, datetime(2023, 8, 9), "monthly")
tracker.add_fixed_expense("Cinemark", 10, datetime(2023, 8, 19,), "monthly")
tracker.add_fixed_expense("Youtube", 20, datetime(2023, 8, 20,), "monthly")
tracker.add_fixed_expense("Netflix", 20, datetime(2023, 8, 27,), "monthly")
tracker.add_fixed_expense("Verizon", 225, datetime(2023, 8, 29,), "monthly")

# Variable Income
# Variable Expenses



print(tracker.project_balance(datetime(2023, 8, 22), [datetime(2023, 9, 1)]))
print(tracker.project_balance(datetime(2023, 8, 22), [datetime(2023, 10, 1)]))
print(tracker.project_balance(datetime(2023, 8, 22), [datetime(2023, 11, 1)]))
print(tracker.project_balance(datetime(2023, 8, 22), [datetime(2023, 12, 1)]))


# Here's a sample run:
tracker = FinanceTracker(1000)
app = FinanceApp(tracker)
